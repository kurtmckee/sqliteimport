[tox]
envlist =
    coverage-erase
    py{3.14, 3.13, 3.12, 3.11, 3.10}
    pypy{3.11}
    coverage-report
    build
    mypy-py{3.14, 3.13, 3.12, 3.11, 3.10}
    docs
    docs-integrations
labels =
    update=update-{requirements, pre-commit, headers}
    prep-release=prep-release

[testenv]
package = wheel
wheel_build_env = build_wheel
setenv =
    PYTHONDONTWRITEBYTECODE=1
depends =
    py{3.14, 3.13, 3.12, 3.11, 3.10}, pypy{3.11}: coverage-erase
deps = -r requirements/test/requirements.txt
commands =
    coverage run -m pytest

[testenv:coverage-erase]
deps = -r requirements/test/requirements-coverage.txt
skip_install = true
commands =
    coverage erase

[testenv:coverage-report{,-ci}]
depends =
    py{3.14, 3.13, 3.12, 3.11, 3.10}
    pypy{3.11}
deps = -r requirements/test/requirements-coverage.txt
skip_install = true
commands_pre =
    - coverage combine
commands =
    coverage report
commands_post =
    !ci: coverage html --fail-under=0

[testenv:mypy-py{3.14, 3.13, 3.12, 3.11, 3.10}]
deps = -r requirements/mypy/requirements.txt
extras =
    cli
setenv =
    MYPY_FORCE_COLOR=1
commands = mypy {posargs}

[testenv:docs]
base_python = py3.13
skip_install = true
deps = -r requirements/docs/requirements.txt
commands =
    sphinx-build -aWEnqb html docs/ build/docs

[testenv:docs-integrations]
description = Test integration doc examples
deps = -r requirements/docs-integrations/requirements.txt
skip_install = true
commands =
    # Verify isort integration instructions in the docs.
    isort docs/isort/assets/custom-section/sorted.py --check --settings docs/isort/assets/custom-section/config.ini
    isort docs/isort/assets/custom-section/sorted.py --check --settings docs/isort/assets/custom-section/config.toml
    isort docs/isort/assets/force-to-top/sorted.py --check --thirdparty sqliteimport --settings docs/isort/assets/force-to-top/config.ini
    isort docs/isort/assets/force-to-top/sorted.py --check --thirdparty sqliteimport --settings docs/isort/assets/force-to-top/config.toml

    # Verify flake8 integration instructions in the docs.
    flake8 --config docs/flake8/assets/empty-flake8-config.ini docs/flake8/assets/example-noqa.py

    # Verify ruff integration instructions in the docs.
    ruff check docs/ruff/assets/custom-section/sorted.py --select I --config docs/ruff/assets/custom-section/pyproject.toml
    ruff check docs/ruff/assets/custom-section/sorted.py --select I --config docs/ruff/assets/custom-section/ruff.toml
    ruff check docs/ruff/assets/force-to-top/sorted.py --select I --config docs/ruff/assets/force-to-top/pyproject.toml
    ruff check docs/ruff/assets/force-to-top/sorted.py --select I --config docs/ruff/assets/force-to-top/ruff.toml
    ruff check docs/ruff/assets/F401/example.py --config docs/ruff/assets/F401/ruff.toml

[testenv:build]
base_python = py3.13
skip_install = true
deps =
    build
    twine
    uv
commands =
    - python assets/validate-readme-banner-url.py
    python -m build --installer uv --outdir dist/
    twine check --strict dist/*

[testenv:update_base]
base_python = py3.13
recreate = true
skip_install = true

[testenv:update-headers]
base = update_base
description = Update headers
deps =
    chipshot
commands =
    chipshot --update assets/ docs/ src/ tests/ requirements/README.rst CHANGELOG.rst README.rst demo.py

[testenv:update-pre-commit]
base = update_base
description = Update pre-commit hooks
deps =
    pre-commit
    upadup
commands =
    pre-commit autoupdate
    upadup

[testenv:update-requirements]
base = update_base
description = Update requirements files
deps =
    poetry
    poetry-plugin-export
commands =
    poetry update --directory="requirements/docs" --lock
    poetry export --directory="requirements/docs" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/docs-integrations" --lock
    poetry export --directory="requirements/docs-integrations" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/mypy" --lock
    poetry export --directory="requirements/mypy" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/regenerate-test-projects" --lock
    poetry export --directory="requirements/regenerate-test-projects" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/test" --lock
    poetry export --directory="requirements/test" --output="requirements.txt" --without-hashes
    poetry export --directory="requirements/test" --output="requirements-coverage.txt" --without-hashes --only="coverage"

[testenv:prep-release]
description = Make the changes needed to create a new release PR
skip_install = true
deps =
    poetry
    scriv
passenv =
    VERSION
commands =
    poetry version "{env:VERSION}"
    scriv collect

[testenv:regenerate_test_projects]
base_python = py3.13
description = Regenerate installed projects used by the test suite
recreate = true
skip_install = true
deps = -r requirements/regenerate-test-projects/requirements.txt
commands =
    python tests/regenerate-test-projects.py
