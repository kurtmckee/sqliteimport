[tox]
envlist =
    coverage-erase
    py{3.14, 3.13, 3.12, 3.11, 3.10, 3.9}
    pypy{3.11}
    coverage-report
    build
    mypy
    docs
    docs-integrations
labels =
    update=update
    prep-release=prep-release

[testenv]
package = wheel
wheel_build_env = build_wheel
setenv =
    PYTHONDONTWRITEBYTECODE=1
depends =
    py{3.14, 3.13, 3.12, 3.11, 3.10, 3.9}, pypy{3.11}: coverage-erase
deps = -r requirements/test/requirements.txt
commands =
    coverage run -m pytest

[testenv:coverage-erase]
deps =
    coverage[toml]
skip_install = true
commands =
    coverage erase

[testenv:coverage-report{,-ci}]
depends =
    py{3.14, 3.13, 3.12, 3.11, 3.10, 3.9}
    pypy{3.11}
deps =
    coverage[toml]
skip_install = true
commands_pre =
    - coverage combine
commands =
    coverage report
commands_post =
    !ci: coverage html --fail-under=0

[testenv:mypy]
deps = -r requirements/mypy/requirements.txt
extras =
    cli
setenv =
    MYPY_FORCE_COLOR=1
commands = mypy

[testenv:docs]
base_python = py3.13
skip_install = true
deps = -r requirements/docs/requirements.txt
commands =
    sphinx-build -aWEnqb html docs/ build/docs

[testenv:docs-integrations]
description = Test integration doc examples
deps = -r requirements/docs-integrations/requirements.txt
skip_install = true
commands =
    # Verify isort integrations in the docs.
    isort docs/isort/custom-section/sorted.py --check --settings docs/isort/custom-section/config.ini
    isort docs/isort/custom-section/sorted.py --check --settings docs/isort/custom-section/config.toml
    isort docs/isort/force-to-top/sorted.py --check --thirdparty sqliteimport --settings docs/isort/force-to-top/config.ini
    isort docs/isort/force-to-top/sorted.py --check --thirdparty sqliteimport --settings docs/isort/force-to-top/config.toml

    # Verify flake8 integrations in the docs.
    flake8 --config docs/flake8/empty-flake8-config.ini docs/flake8/example-noqa.py

[testenv:build]
base_python = py3.12
skip_install = true
deps =
    build
    twine
    uv
commands =
    - python assets/validate-readme-banner-url.py
    python -m build --installer uv --outdir dist/
    twine check --strict dist/*

[testenv:update]
base_python = py3.13
description = Update dependencies, requirements files, and pre-commit hooks
recreate = true
skip_install = true
deps =
    poetry
    poetry-plugin-export
    pre-commit
    upadup
commands =
    # Update test requirements
    poetry update --directory="requirements/docs" --lock
    poetry export --directory="requirements/docs" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/docs-integrations" --lock
    poetry export --directory="requirements/docs-integrations" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/mypy" --lock
    poetry export --directory="requirements/mypy" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/regenerate-test-projects" --lock
    poetry export --directory="requirements/regenerate-test-projects" --output="requirements.txt" --without-hashes
    poetry update --directory="requirements/test" --lock
    poetry export --directory="requirements/test" --output="requirements.txt" --without-hashes

    # Update pre-commit hook versions
    pre-commit autoupdate
    upadup

[testenv:prep-release]
description = Make the changes needed to create a new release PR
skip_install = true
deps =
    poetry
    scriv
passenv =
    VERSION
commands =
    poetry version "{env:VERSION}"
    scriv collect

[testenv:regenerate_test_projects]
base_python = py3.13
description = Regenerate installed projects used by the test suite
recreate = true
skip_install = true
deps = -r requirements/regenerate-test-projects/requirements.txt
commands =
    python tests/regenerate-test-projects.py


[flake8]
max-line-length = 80
extend-select = B950
extend-ignore = E203,E501,E701
extend-exclude =
    demo.py,
    docs/flake8/*.py,
    docs/isort/*.py
