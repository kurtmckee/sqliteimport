# This file is a part of sqliteimport <https://github.com/kurtmckee/sqliteimport>
# Copyright 2024-2025 Kurt McKee <contactme@kurtmckee.org>
# SPDX-License-Identifier: MIT

import importlib.resources
import pathlib
import textwrap


def generate_prologue(database_path: pathlib.Path) -> str:
    header = textwrap.dedent(
        """\
        # The code in this block was generated by sqliteimport.
        # https://github.com/kurtmckee/sqliteimport
        # Copyright Kurt McKee <contactme@kurtmckee.org>
        # SPDX-License-Identifier: MIT
        """
    ).rstrip()
    lines: list[str] = [header]

    # Add code variables.
    sqliteimport_modules = get_sqliteimport_modules()
    lines.append(f"sqliteimport_modules = {sqliteimport_modules!r}")

    template = importlib.resources.read_text("sqliteimport", "injector-template.py")
    drop_lines = False
    for line in template.splitlines():
        if not line.strip():
            continue
        if line.endswith("# IGNORE: START"):
            drop_lines = True
            continue
        if line.endswith("# IGNORE: END"):
            drop_lines = False
            continue
        if drop_lines:
            continue
        if line.lstrip().startswith("#"):
            continue
        lines.append(line)

    wrapper = textwrap.dedent(
        """
        # BEGIN GENERATED CODE BLOCK. DO NOT EDIT!
        def __sqliteimport_setup(database: bytes) -> None:
        {function_block}
        __sqliteimport_database = {database!r}
        __sqliteimport_setup(database=__sqliteimport_database)
        del __sqliteimport_database
        del __sqliteimport_setup
        # END GENERATED CODE BLOCK.
        """
    )
    function_block = textwrap.indent("\n".join(lines), "    ")
    database = database_path.read_bytes()
    return wrapper.format(function_block=function_block, database=database)


def inject_prologue(prologue: str, code: str, marker: str) -> str:
    """Inject the *prologue* into *code*."""

    lines: list[str] = []
    code_iter = iter(code.splitlines())
    for line in code_iter:
        if line.strip() == f"# {marker}":
            prefix = line[: line.find("#")]
            lines.append(textwrap.indent(prologue, prefix))
            break
        lines.append(line)
    lines.extend(code_iter)
    lines.append("")  # The trailing newline will be lost otherwise.
    return "\n".join(lines)


def get_sqliteimport_modules() -> dict[str, str]:
    files: dict[str, str] = {}
    for file in importlib.resources.files("sqliteimport").iterdir():
        if not file.name.endswith(".py"):
            continue
        stem = file.name[:-3]
        if stem == "__init__":
            fullname = "sqliteimport"
        else:
            fullname = f"sqliteimport.{stem}"
        files[fullname] = file.read_text()
    return files
